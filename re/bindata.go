// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../lpeg/re.lua (6.286kB)

package re

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x6d\x6f\xdb\x38\x12\xfe\xee\x5f\x31\xc7\xdd\x9e\x25\x5b\x56\xec\xb4\x77\xc0\xa5\x75\x0f\x0b\xb7\x28\x0a\x2c\x7a\x41\xb3\x97\x3b\x5c\xae\x09\x68\x89\x56\x88\x8a\x94\x4a\x51\x79\xd9\x34\xfd\xed\x8b\x19\x52\xaf\x76\xb3\x68\x3e\xc4\x12\x67\x38\x9c\x19\xce\x3c\x33\xa3\xc5\x02\x7e\x7e\x9f\x9e\x80\x11\x71\x5e\xf3\xe8\x06\x56\xf1\x8b\x17\x70\xbc\x5c\x3d\x3f\x5a\x3e\x3f\x3a\xfe\x3b\x1c\x2f\x4f\x56\xab\x93\x17\x4b\x30\xc5\x56\x18\x5b\xc0\xdb\xbb\x12\x7e\x9e\x4c\x16\x0b\x90\xaa\x2c\x8c\x15\x29\xec\x6a\x9d\x58\x59\xe8\x0a\xb8\x4e\x41\x15\x69\x9d\x8b\x6a\x92\x17\x09\xcf\xc1\x16\xba\x56\x5b\x61\x22\xb0\xf7\xa5\x88\xa0\x34\x52\xdb\x08\x84\x31\x85\x81\xf5\x93\x64\x2f\xa1\x12\x56\x09\xcb\x2d\xdf\xe6\x02\xd6\x83\x57\xcf\xa1\x60\x0d\x46\x7c\xa9\xa5\x11\x2c\x2f\x45\xc6\x48\xbd\xa9\x9a\xc2\xad\xcc\x73\xd8\x0a\xa8\x2b\x91\x82\x2d\xa0\xe4\xa6\x12\x20\xee\x4a\x23\xaa\x0a\x35\x8e\x48\xe5\xa9\xda\xe7\x45\x11\x89\x11\xdc\x0e\xf8\x5f\x82\xbd\xe6\x16\x64\x15\xc1\xd4\x88\x29\x98\x5a\x57\x50\x68\x3c\x2c\x72\xec\x52\x67\x50\x72\x6b\x85\xd1\x15\xca\x20\xa2\x9a\x36\xaa\xa2\xae\x8a\xf4\xf3\x4c\xd3\x0a\xf6\xec\xb1\xb0\x86\xac\x67\x67\xa0\x54\x7c\x1a\x2c\xc3\x70\x32\xa1\xad\x1f\x0a\x50\x85\x11\x90\xe5\xc5\x96\xe7\xc0\x93\x44\x54\x95\xa8\x80\xef\xac\x30\x60\xaf\x65\x05\x65\x21\xb5\xf5\xf2\x6e\x84\x41\xe5\x61\x0d\x57\xe7\x6f\x3f\x9e\xbd\xff\xd7\x87\x89\xdc\x75\xab\x6b\x60\xbf\xd6\x1c\xfe\x16\x1f\x33\xb0\xd7\x42\xc3\xd5\xdb\x0f\xe7\xb0\x06\x2d\x73\x10\x3a\x9d\x4c\xbc\x18\xae\xef\x51\xf9\xf8\x34\x58\x85\x4e\x8f\x53\x23\x16\xa9\xd8\x49\x2d\x52\xd0\x5c\xb5\x97\x7e\x6a\x44\x2a\x76\xb0\x86\x07\xd0\xb9\xdb\xc3\xfe\xaf\x19\x3c\xb6\xb2\x94\x50\xfe\x69\xd7\x3d\x66\xf8\xd8\x70\x34\x41\x05\x75\x99\x72\x2b\x68\x51\x40\x10\x4e\x00\x94\x8a\xdd\x6b\xe0\x0e\xc2\x35\xf7\x14\x73\x58\xb7\x8f\x79\x79\xcd\x3b\x4a\xd2\x51\x12\x6d\x4d\xde\x51\xd2\x8e\x92\xca\x4c\xda\x8e\x92\x75\x94\xcc\xf0\xf2\xba\xa3\xe4\x1d\x25\x2f\x6e\x85\xe9\x28\x65\x47\x29\xd1\x84\x8e\x52\x75\x94\xaa\xe4\x89\xe8\x28\x75\x47\xa9\xcb\xb2\x2f\xed\xb6\x6f\x8f\xae\x55\x47\xb9\xeb\x28\x77\x23\xb5\x7f\x81\x35\x5d\xd6\xa2\xdd\xda\xd1\x36\x63\x5a\xd2\xd1\xde\x8c\x69\x69\x47\x7b\x37\xa6\x65\x1d\xed\xd7\x31\xad\xe7\xdc\xd3\x31\xad\xec\x68\x67\x63\x5a\xd5\xd1\xfe\x3d\xa6\xd5\x1d\xed\x3f\x63\xda\x6d\x47\xfb\xef\x98\x76\x87\x01\x23\x30\xed\x1e\x1e\x01\x00\x16\x0b\x30\xa2\xb2\xdc\x58\x5c\x2e\xe4\xef\x1c\xa3\x6c\x02\x14\x88\xc4\x35\x01\x8a\xc4\xe6\xb9\x97\x93\x0f\x57\x57\xaa\x48\x11\x85\xd8\x0d\x43\x5a\x35\x48\x52\xa1\x22\x50\x36\x1c\xaf\xef\xbe\x47\xc8\x5a\x82\x4b\xb3\x7e\xa4\x07\x94\xeb\xee\xec\xf7\x3e\xed\xda\x94\x08\xaa\x48\x86\x0e\x2b\x03\x19\x41\x75\x52\xd5\xdb\x60\x15\x81\x5c\xac\xc2\xf0\x25\x18\x61\x6b\xa3\x41\x62\xf6\x86\xfb\x09\x95\x09\x8b\xd9\x19\xc8\x34\x82\x54\xec\xaa\xb0\x35\x12\x73\x04\x57\x08\x14\xf1\xe1\x42\xa6\x9f\x26\x00\x72\x07\xba\xb0\x90\x38\x78\x20\x70\x0e\x58\xad\xfb\xa9\x7f\x02\x0c\xe2\x18\x64\x1a\x12\x66\x40\xa3\x44\x32\xe9\x43\x48\xab\x03\x82\xdf\x95\x2b\x02\x41\x15\x81\xec\x74\x50\x15\x66\x5d\xf0\x53\x05\xaf\x40\xc2\x1c\x8e\x97\x21\xa9\xe3\x8c\x24\xc6\x27\xfe\x0a\xd3\x30\x46\x72\x8e\x5b\xe3\x18\x58\x1c\xc7\x0c\xa3\xc0\x49\x66\x1e\x78\x7d\x0d\xd2\x82\x1b\x98\x3e\xab\xa6\x2c\x3c\xd9\x15\x46\x71\x1b\xa8\x2a\xc3\x63\x9c\x9d\xaa\xca\x22\x38\xf6\x57\x34\xb2\x42\xd5\xb9\x85\xa0\x8c\x40\x77\xfa\x6b\x04\x00\xc2\x6b\x6b\x6a\x81\xeb\xb7\xd7\x32\x17\xa0\xe1\xf5\x1a\x56\x90\x16\x64\x00\x7a\xf4\xd9\xb1\x5b\x22\xa7\xd2\x36\x5d\xc2\x0c\x4a\xef\x40\x00\x5c\xa2\x15\x7a\x43\xfc\xd6\x47\xc7\xa8\x58\xdf\xc1\xba\x3c\xa8\x9a\xf8\x52\xf3\x3c\xe1\xa5\x73\x6f\x04\x49\xe8\xee\x11\xcb\x6c\x90\x84\xf0\x6d\x0d\xac\xb2\x46\xea\xcc\x83\x7e\x23\xce\x83\x7e\x63\x0e\x06\xfb\x4f\x09\xcc\x41\xba\xfd\x8d\x77\x41\xc0\x02\x56\x21\x56\x8f\x64\x20\x40\x80\xc8\x2b\x31\x16\xd7\x0f\x02\x4c\xfb\xa0\x0f\x84\x30\x07\xb6\x58\x30\x98\x41\x30\x48\x5d\x9d\x87\x97\xcb\xf0\x72\xd9\x6c\xc4\x38\xa3\x54\xf8\x18\xb0\x5f\xfe\xc7\x22\x60\xfc\x77\xfc\x7f\x75\xc5\x42\x98\x1d\x5c\x8f\x80\x2d\xff\xc1\x7a\x32\xb8\x31\x05\x82\xea\x19\xcc\x80\xbd\x5a\xb0\x49\xdb\x65\x7c\xb9\xda\x15\x79\x4e\x44\xac\x57\x47\x0c\xd5\x0a\xe9\xff\x23\xfd\x3f\x71\x3f\xdf\xdc\xcf\x57\xfa\x09\x48\xa7\x99\x13\x1b\xc2\x1c\x16\xab\xc9\xa4\xd5\x73\x43\x64\x5f\x2c\x39\xf4\xf3\x05\x0a\x9d\xdf\xc3\x35\xbf\x11\xa0\x04\xd7\xd8\x35\x48\x0d\x1c\x32\x79\x83\x29\xa6\x6f\xa4\x29\xb4\x12\x6d\x0d\x7f\x43\xf5\xd4\x9f\xa6\xe2\x0d\x37\x19\x95\x61\xef\x99\x5a\xf9\x03\x55\xfc\x11\x2d\xbe\x5c\xa1\x47\xce\xe0\xa8\xed\xb0\x5a\xef\xd3\xa5\x23\x84\x4d\x99\x13\x15\x78\xaf\xb3\x29\x3a\x0a\xf7\x21\x69\x3e\x4e\xb4\x29\x9b\x0e\xf9\xa7\x6c\xea\xf9\xa7\x6c\xda\xde\x6e\x63\xe4\x1a\xd8\x33\x3c\x00\x15\x3f\xea\xe2\x32\x48\xa2\x37\x43\xcc\xe1\x88\xac\xc8\xe6\x60\x07\x1f\x2e\x92\x4f\x98\xc9\x2e\x0c\x2e\x92\x3e\x04\x71\xdb\x03\x21\x08\x18\x79\x64\x4a\xd8\x93\x50\xb2\x4f\xa1\x05\x26\x36\xc6\x22\x6e\xfb\xb9\xf2\x91\xeb\xcc\xdf\x53\x45\x26\xcd\x20\xc0\x9b\x5f\xb0\x23\x46\x01\xd5\xf8\xe5\x13\x0b\x43\x38\xc2\xa4\xfe\xd8\xec\x95\x96\x0a\x44\x63\xec\xdc\x0b\x9b\x93\x7f\xb8\xbe\x6f\x6f\x66\x93\xf3\xaa\x82\x35\x39\x93\x5d\x20\x0c\xd1\x29\x1b\x3a\xe9\x92\x5d\x22\x62\xfb\xb2\x54\x94\xe8\x21\x74\x49\xa1\xca\x5c\xe0\xe5\x43\x75\xaf\xb6\x45\x4e\xbb\x54\xbc\xd9\x05\x74\xee\x0c\xdc\xaf\x53\xed\x72\x89\x35\x24\xbe\xba\xe2\x69\x1a\xc2\xd1\x13\xf8\xd8\xbf\x04\x28\xc3\xd6\x2d\xd4\x02\x5e\x32\x72\xbf\x33\xb9\x44\xf7\x37\x40\x34\xc3\x63\xf6\x00\x86\xa7\x29\x55\x11\x1b\xc1\xe7\x08\x5b\xe4\x06\x60\x2e\x3e\x7f\xa2\x2b\x22\x45\x7c\xad\x98\xb2\x38\xfe\x1c\xc7\x6c\x0a\x3c\x37\x82\xa7\xf7\xad\xe7\x78\x05\x1c\x4c\x9d\x0b\x46\x90\x9b\x57\x82\xf6\x91\x94\x35\x8a\x1d\xe3\x9d\x3d\x08\x77\x3b\x69\x2a\x57\xd5\x74\x04\xa6\x35\xcd\x29\x19\x3c\xe8\xc7\x08\x1c\xe1\x60\x35\xfa\xf0\x1b\xed\xdb\x86\x5d\xa0\x6d\xf7\x6c\x40\x25\x01\x0d\xd1\x64\x08\x8d\x09\x45\x6d\x2b\x99\x0a\xcc\x5b\xc3\x95\xe2\xa6\xb5\xa2\xd1\x40\xa9\xf8\x3c\xa0\xf2\x30\x86\x41\x71\x57\x3a\xa8\x79\x00\xf6\xf6\xae\x64\xd1\x04\x68\xb8\x72\xd8\x14\x80\x8a\xcf\xd9\x3b\x2f\x75\x70\xa9\x73\x17\x0a\x48\x3f\x13\x5f\x08\x36\x11\xad\x66\xb4\xaf\x59\x1d\x85\x45\xf8\x72\x02\x70\x26\xbe\xb8\x70\xc7\xcd\x9b\x84\x42\xd0\x23\xe7\x39\x3b\x35\x62\x27\xef\xd8\xe5\x12\xfc\x3e\x55\xe7\x5d\xb1\x9d\x61\x45\xee\x20\x72\xde\x2b\xe0\x24\xda\xed\xc6\xa4\xff\x6b\x5f\x13\x2f\x14\x93\x07\x45\xe6\xde\xa3\xde\x0c\xf6\x97\x27\x78\x6b\xad\x26\x03\x93\xcf\xd9\x59\xbd\x43\x0e\x32\x85\x1e\x3b\x6b\x70\xbb\x54\xdc\xdc\x7b\x89\x3d\x87\x05\xe4\xcb\x53\x36\xf7\x70\x97\x60\xa7\x44\x47\x94\xc5\x6d\xb8\xe7\xd9\x53\x36\x6b\x19\x97\x4f\x33\xfe\xb3\x65\x5c\x3c\x21\x12\x33\xcb\xdd\xe7\x26\x0b\x10\xa8\xfd\x1e\x6c\x1e\xc2\xc3\xed\xcc\xdc\x31\x3b\x98\x38\x63\xf3\x85\x3b\xa8\x87\xec\x4e\x42\x73\xe2\x61\x29\x7b\x8a\x2c\x5e\x37\xfe\xf6\xda\x04\xbe\x18\xcc\xb1\x80\x0c\xc5\xa6\xf2\xe6\x3b\x62\x7b\x0e\x78\x78\x6c\x3d\xa0\x65\x1e\xe1\x93\xfd\x93\x4d\x9b\x2c\x70\x15\xc1\x77\xa1\x3f\x70\xe6\x9e\x3d\xeb\xd7\x5d\xfc\x7c\x4f\x6e\xbc\x51\x63\x2f\x53\x65\xec\xad\x50\xaa\x74\xd8\xc8\xa3\x6d\xb4\x6b\x11\x64\x87\xef\x04\x1b\xe0\x03\x9d\xc2\x0c\x23\x3d\x60\x3e\x72\x31\x7b\x11\x25\xc3\x71\x9e\x7a\xf7\x52\xe9\x38\x1d\xd1\xa8\x30\x8c\xd6\x3c\x28\x8e\xed\x7c\x38\xa1\x08\xf2\xc5\x9f\x9d\x30\xe7\x49\x72\x7a\x18\x8e\x94\xc0\x2e\xe5\x3b\x45\xa0\xb3\x51\xf7\xf1\x5f\x91\xf7\xa8\x8b\x6d\x5b\xcf\xbe\x97\x51\x2c\x9d\xdd\x2f\xe3\x7a\xb0\x5d\xd9\x00\x7f\xb6\x81\x0e\xa3\xb6\xf5\x3c\x24\xad\x89\x1a\x72\xc9\xa6\xdc\xb3\xf4\xdb\xd8\xa7\xdf\x5a\xe6\xb1\xb3\xd8\xc3\xd7\x31\xf3\xd7\x96\xd9\xee\x31\x8f\x79\x5b\xd6\x03\x1a\xc6\x6d\x58\x53\x29\x1f\x32\x34\xf7\xb0\x70\xad\xe4\x1c\xd8\xab\xd6\x43\x33\x60\xaf\x3d\xa2\x6e\xb6\x01\x7b\xc7\xb0\x6f\xf8\xf0\x1b\x06\xce\x1b\xbc\x5b\x69\xdd\x77\x98\x7e\xd7\xd8\xd3\x0b\xf9\x3c\xe4\x3b\x68\xcb\x1c\x50\xd3\x24\x11\x01\xc9\x9b\x0d\xd4\x69\xe1\xaf\x13\x8f\x76\xb5\xe5\x70\xd6\x48\x19\x70\x60\xc4\x8f\x42\xc4\x55\xca\xb0\x89\xd5\xc7\xa6\x4a\x35\xc3\xd2\xba\xcb\x33\x52\x69\xc7\xf3\xaa\xd3\x89\x8a\x99\xdb\x8a\x91\xba\xc0\x2e\x62\x50\x23\xf6\x6b\x2e\x36\x39\x38\x17\x61\xe0\x35\x53\xa8\xdc\xa1\x08\x1a\x51\x4a\x1a\x2d\x9a\x59\x6d\x38\xa3\x50\x63\xe2\x7a\xa6\xa6\x9d\xf0\xd2\xba\xb9\x25\xa1\xe1\xc9\xed\x3e\x51\xdc\x26\xd7\x78\xd0\x6a\x70\x16\x35\x94\xe5\x60\xa8\x95\x3a\x29\x8c\x11\x89\x6d\xf6\xb2\x08\x9e\x8f\xdb\xc8\xc3\x13\x17\x1d\x42\xe3\x56\x39\x18\x68\x49\x13\x25\xd4\x45\xf9\x69\xef\x58\xba\x04\x62\xf0\x06\x04\xa5\x0b\x37\xc7\x8f\xeb\x7b\x0d\x50\x52\x7a\x7b\x70\xb0\xc3\x3e\x6d\x75\x78\x38\xdd\x49\x9d\x7e\x4f\x9d\xdd\x0f\xe8\x03\x47\xb0\xec\xd6\x15\x35\x2c\x94\xbc\x01\x5e\x7c\x82\x03\x6a\xf3\x3a\x87\x95\x7b\x3b\x0f\x56\x21\x3c\xd2\xae\xdd\x21\x53\x7c\x13\x1d\xd1\x78\x79\xc8\x20\x52\x4c\x0e\x6e\xbd\x99\x39\x47\x0d\x96\xec\xb7\x56\xe3\x2f\x1d\x55\xbd\x6d\x5c\x60\x44\xd9\x39\x01\xe7\x9f\xcc\x2b\x56\x18\xf7\x65\x68\xb1\x00\xa1\xab\xda\x88\x96\x22\x2b\xe7\x9b\x22\xcf\x45\x62\x45\xea\x27\xf9\x6b\x61\x84\xff\x46\xe4\x0c\xcb\x86\xce\xcd\x2e\x8c\xf8\x91\xbb\x6e\xfc\xba\xa9\x82\x20\xc1\x34\x32\xa2\x44\x57\xe2\x70\x45\x0c\x4e\xe0\x9f\x04\x43\xf3\x11\x09\xcd\xb8\xf3\x1f\xe6\xfb\xdf\x64\x0d\xba\xfa\x61\x02\x6d\xe2\xb5\x7a\x20\x14\xb8\xe0\x5d\xbb\x5f\x5c\xa0\xe8\x59\xd3\x0f\xbe\x92\x27\xd7\xf4\x83\xaf\x83\x6f\xb2\xeb\xc1\x6b\x84\xd8\x71\xf0\xf3\xf2\xaa\xf9\xbc\xfc\x2e\x26\x65\x8c\x70\xdd\xb8\x37\xc5\x88\xc9\x1f\x01\x00\x00\xff\xff\xc8\x93\xa6\xb9\x8e\x18\x00\x00")

func reLuaBytes() ([]byte, error) {
	return bindataRead(
		_reLua,
		"re.lua",
	)
}

func reLua() (*asset, error) {
	bytes, err := reLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "re.lua", size: 6286, mode: os.FileMode(438), modTime: time.Unix(1484420236, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x64, 0x38, 0x5e, 0x9, 0x6, 0xcd, 0x48, 0x11, 0x35, 0xe2, 0xb6, 0x3a, 0x78, 0x64, 0xaf, 0xc9, 0xde, 0x6a, 0xbe, 0xcf, 0x4f, 0x6c, 0x1c, 0xf0, 0xd2, 0x9f, 0x57, 0x94, 0x17, 0x43, 0xbc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"re.lua": reLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"re.lua": {reLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
